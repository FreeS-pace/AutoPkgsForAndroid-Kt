import java.nio.file.Files

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
}

group = 'com.keep_young.auto_pkg'
version = 'V1.0'
ext.kotlinVersion = "1.6.0"

repositories {
    google()
    mavenCentral()
}

dependencies {
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0-RC'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.3'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'
    implementation 'com.aliyun.oss:aliyun-sdk-oss:3.13.2'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    manifest.attributes.put("Main-Class", "com.ky.auto_pkg.LaunchKt")
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) })
}

task copyArchiv2Config {
    doLast {
        def archiveFile = file("${buildDir.absolutePath}/libs/").listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name != null && name.endsWith(".jar")
            }
        })[0]
        def targetDir = new File(System.getenv("ANDROID_CONFIG_PATH"), archiveFile.name)
        Files.copy(archiveFile.toPath(), targetDir.toPath())
    }
}

test {
    useJUnit()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}